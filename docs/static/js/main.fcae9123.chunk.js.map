{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","undefined","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KA0B9C,OACE,8BACE,sBAAMC,SAlBW,SAACC,GAEpBA,EAAEC,iBACFC,QAAQC,IAAIN,QACMO,IAAfP,GACEA,EAAWQ,OAAOC,OAAS,IAC5BX,GAAe,SAAAY,GAAI,OAAKV,GAAL,mBAAmBU,OACtCT,EAAc,MAWhB,SACE,uBACEU,KAAK,OACLC,MAAOZ,EACPa,SA5BkB,SAACV,GACzBF,EAAcE,EAAEW,OAAOF,e,+BCNdG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEhBC,EAFgB,iDAEiCC,UAAUH,GAF3C,+DAICI,MAAMF,GAJP,cAIhBG,EAJgB,gBAKDA,EAASC,OALR,uBAKfC,EALe,EAKfA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXhB,kBAgBfM,GAhBe,4CAAH,sDCDRO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAKnC,OACE,sBAAKc,UAAU,yCAAf,UACO,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCNFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEdjB,mBAAS,CACjCwB,KAAM,GACNa,SAAQ,IAJ8B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA2BxC,OApBAC,qBAAW,WAETxB,EAAUC,GAAWwB,MAAM,SAAAC,GAEvBH,EAAS,CACPf,KAAMkB,EACNL,SAAQ,SAUd,CAACpB,IAIIqB,EDxBuBK,CAAa1B,GAA/Ba,EAFyB,EAE9BN,KAAYa,EAFkB,EAElBA,QAGnB,OACE,qCACA,mCAAMpB,KAELoB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAKKH,EAAOJ,KAAK,SAAAC,GACV,OACE,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEQPgB,EA3BM,WAAO,IAAD,EAEU5C,mBAAS,CAAC,cAFpB,mBAElB6C,EAFkB,KAEP9C,EAFO,KAIzB,OACE,gCACE,8CAEE,cAAC,EAAD,CAAaA,cAAeA,IAE9B,uBAEA,6BAEI8C,EAAWnB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MCfnB6B,IAASC,OACH,cAAC,EAAD,IACJC,SAASC,eAAe,W","file":"static/js/main.fcae9123.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState(''); \n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n\n    \n  }\n\n  const handleSubmit = (e) => {\n\n    e.preventDefault();\n    console.log(inputValue);\n    if(inputValue !== undefined ){\n      if(inputValue.trim().length > 2){\n        setCategories( cats => [inputValue,...cats]);\n        setInputValue('');\n      }\n    }\n    \n    \n\n  }\n\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={ handleInputChange }\n        />  \n        </form>\n    </div>\n  );\n}\n\nAddCategory.propTypes = { \n  setCategories: PropTypes.func.isRequired\n}","\n\n\nexport const getGifts = async( category ) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=bMJxIcGDoVqhFOKQI1vGm6kLkRPC57rJ`;\n\n  const response = await fetch(url);\n  const {data} = await response.json();\n\n  const gifs = data.map( img => {\n    returnÂ {\n      id:img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  });\n\n  \n  return gifs;\n\n}\n","import React from 'react'\n\nexport const GifGridItem = ( {title, url} ) => {\n\n  //console.log(id,title,url);\n\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n           <img src={url} alt={title} />\n           <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n  const {data:images,loading} = useFetchGifs(category);\n \n\n  return (\n    <>\n    <h3> {category}</h3>\n\n    {loading && <p>Loading</p>}\n\n    <div className=\"card-grid\">\n\n       {  \n         \n           \n         images.map( img => { \n           return(\n             <GifGridItem \n             key={img.id} \n             {...img}/>\n           );\n           })\n\n          \n           \n         \n        }\n        </div> \n   \n    </>\n  )\n}\n","import {useEffect, useState} from 'react';\nimport {getGifts} from '../helpers/getGifs';  \n\nexport const useFetchGifs = (category) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading:true\n  });\n\n  useEffect( () => {\n\n    getGifts( category ).then( imgs => {\n\n        setState({\n          data: imgs,\n          loading:false\n        });\n        \n     \n\n\n      \n        \n    })\n \n  },[category])\n  \n\n\n  return state;\n\n\n}","import React,{useState} from 'react'\nimport {AddCategory} from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  const [categories,setCategories] = useState(['One Punch'])\n\n  return(\n    <div>\n      <h2>GifExpertApp</h2>\n        \n        <AddCategory setCategories={setCategories} />\n\n      <hr />\n      \n      <ol>\n        {\n          categories.map(category =>( \n            <GifGrid \n              key={category}\n              category={category} \n              \n              />\n            ))\n        }\n        \n      </ol>\n    </div>\n  );\n}\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n      <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}